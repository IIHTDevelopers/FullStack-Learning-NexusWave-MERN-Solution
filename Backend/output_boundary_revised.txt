assignmentcontrollerBoundaryTestShouldRetrieveAllAssignmentsForInstructor=true
assignmentcontrollerBoundaryTestShouldRetrieveAllAssignmentsForStudent=true
assignmentcontrollerBoundaryTestShouldCreateANewAssignment=true
assignmentcontrollerBoundaryTestShouldRetrieveAAssignmentById=true
assignmentcontrollerBoundaryTestShouldUpdateAAssignmentById=true
assignmentcontrollerBoundaryTestShouldDeleteAAssignmentById=true
assignmentcontrollerBoundaryTestShouldAddANewAssignmentSubmission=true
assignmentcontrollerBoundaryTestShouldRetrieveASubmissionByAssignmentid=true
assignmentcontrollerBoundaryTestShouldRetrieveASubmissionByStudentid=true
assignmentcontrollerBoundaryTestShouldDeleteASubmittedAssignmentById=true
assignmentcontrollerBoundaryTestShouldRetrieveASubmissionStatusById=true
assignmentcontrollerBoundaryTestShouldSearchForAAssignmentByTitleAndCourseid=false
assignmentcontrollerBoundaryTestShouldRetrieveAUnsubmittedassignmentbyinstructororstudent=true
assignmentcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingAAssignmentWithInvalidId=true
assignmentcontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingAAssignmentWithInvalidId=true
assignmentcontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingAAssignmentWithInvalidId=true
assignmentcontrollerBoundaryTestShouldReturnA500ErrorWhenCreatingAAssignmentFails=true
assignmentcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingASubmittedAssignmentWithInvalidId=true
assignmentcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingASubmittedAssignmentWithInvalidId=true
assignmentcontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingASubmittedAssignmentWithInvalidId=true
assignmentcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingASubmittedAssignmentsStatusWithInvalidId=true
coursecontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/courseProtectedRoutesWithoutAToken=false
coursecontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/:idProtectedRoutesWithoutAToken=true
coursecontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/:idProtectedRoutesWithoutAToken=true
coursecontrollerBoundaryTestShouldCreateANewCourse=true
coursecontrollerBoundaryTestShouldRetrieveACourseById=true
coursecontrollerBoundaryTestShouldRetrieveACourseContentById=true
coursecontrollerBoundaryTestShouldUpdateACourseById=true
coursecontrollerBoundaryTestShouldDeleteACourseById=true
coursecontrollerBoundaryTestShouldSearchForCourseByTitleAndDescription=true
coursecontrollerBoundaryTestShouldRetrieveACourseByCategory=true
coursecontrollerBoundaryTestShouldRetrieveACourseByMinrating=true
coursecontrollerBoundaryTestShouldReturnA404ErrorWhenGettingACourseWithInvalidId=true
coursecontrollerBoundaryTestShouldReturnA404ErrorWhenGettingACourseContentWithInvalidId=true
coursecontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingACourseWithInvalidId=true
coursecontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingACourseWithInvalidId=true
coursecontrollerBoundaryTestShouldReturnA500ErrorWhenCreatingACourseFails=true
studentcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPost/studentProtectedRoutesWithoutAToken=true
studentcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/:idProtectedRoutesWithoutAToken=true
studentcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/:idProtectedRoutesWithoutAToken=true
studentcontrollerBoundaryTestShouldRetrieveAllEnrolledStudents=true
studentcontrollerBoundaryTestShouldRetrieveAStudentById=true
studentcontrollerBoundaryTestShouldUpdateAStudentById=true
studentcontrollerBoundaryTestShouldDeleteAStudentById=true
studentcontrollerBoundaryTestShouldSearchForStudentsByNameAndEmail=true
studentcontrollerBoundaryTestShouldAddANewReview=true
studentcontrollerBoundaryTestShouldRetrieveAllPopularCourses=true
studentcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingAStudentWithInvalidId=true
studentcontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingAStudentWithInvalidId=true
studentcontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingAStudentWithInvalidId=true
studentcontrollerBoundaryTestShouldReturnA500ErrorWhenCreatingAStudentFails=true
studentcontrollerBoundaryTestShouldReturnA404ErrorWhenNoDataWithStudentsByNameAndEmail=true
instructorcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/:idProtectedRoutesWithoutAToken=true
instructorcontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessDelete/:idProtectedRoutesWithoutAToken=true
instructorcontrollerBoundaryTestShouldRetrieveAllInstructors=true
instructorcontrollerBoundaryTestShouldCreateANewInstructor=true
instructorcontrollerBoundaryTestShouldRetrieveAInstructorById=true
instructorcontrollerBoundaryTestShouldUpdateAInstructorById=true
instructorcontrollerBoundaryTestShouldDeleteAInstructorById=true
instructorcontrollerBoundaryTestShouldRetrieveACourseByIdAndInstructorid=true
instructorcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingAInstructorWithInvalidId=true
instructorcontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingAInstructorWithInvalidId=true
instructorcontrollerBoundaryTestShouldReturnA404ErrorWhenDeletingAInstructorWithInvalidId=true
instructorcontrollerBoundaryTestShouldReturnA500ErrorWhenCreatingAInstructorFails=true
instructorcontrollerBoundaryTestShouldReturnA404ErrorWhenGettingACourseByInvalidIdAndInvalidInstructorid=true
gradecontrollerBoundaryTestShouldReturn401UnauthorizedWhenTryingToAccessPut/gradesProtectedRoutesWithoutAToken=true
gradecontrollerBoundaryTestShouldRetrieveAllGrades=true
gradecontrollerBoundaryTestShouldRetrieveGradesForTheSpecifiedStudent=false
gradecontrollerBoundaryTestShouldRetrieveGradesForTheSpecifiedStudentAndCourse=true
gradecontrollerBoundaryTestShouldRetrieveGradesForTheSpecifiedCourse=true
gradecontrollerBoundaryTestShouldUpdateAGradeById=true
gradecontrollerBoundaryTestShouldRetrieveAverageGradesForAllCourses=true
gradecontrollerBoundaryTestShouldReturnA404ErrorWhenGettingGradesForTheSpecifiedStudentWithInvalidStudentid=false
gradecontrollerBoundaryTestShouldReturnA404ErrorWhenGettingGradesForTheSpecifiedStudentWithInvalidStudentidAndCourseid=true
gradecontrollerBoundaryTestShouldReturnA404ErrorWhenGettingGradesForTheSpecifiedStudentWithInvalidCourseid=true
gradecontrollerBoundaryTestShouldReturnA404ErrorWhenUpdatingAGradeWithInvalidId=true
gradecontrollerBoundaryTestShouldReturnA404ErrorWhenGettingAverageGradesForAllCourses=true
